# Python3 运算符
# Python语言支持以下类型的运算符:
#
#     算术运算符
#     比较（关系）运算符
#     赋值运算符
#     逻辑运算符
#     位运算符
#     成员运算符
#     身份运算符
#     运算符优先级
# Python算术运算符
# +	加 - 两个对象相加	a + b 输出结果 31
# -	减 - 得到负数或是一个数减去另一个数	a - b 输出结果 -11
# *	乘 - 两个数相乘或是返回一个被重复若干次的字符串	a * b 输出结果 210
# /	除 - x 除以 y	b / a 输出结果 2.1
# %	取模 - 返回除法的余数	b % a 输出结果 1
# **	幂 - 返回x的y次幂	a**b 为10的21次方
# //	取整除 - 向下
import math
import random

a = 21
b = 10
c = 0

c = a + b
print("1 - c 的值为：", c)

c = a - b
print("2 - c 的值为：", c)

c = a * b
print("3 - c 的值为：", c)

c = a / b
print("4 - c 的值为：", c)

c = a % b
print("5 - c 的值为：", c)
# 修改变量 a 、b 、c
a = 2
b = 3
c = a ** b
print("6 - c 的值为：", c)

a = 10
b = 5
c = a // b
print("7 - c 的值为：", c)

# /=	除法赋值运算符	c /= a 等效于 c = c / a
# %=	取模赋值运算符	c %= a 等效于 c = c % a
# **=	幂赋值运算符	c **= a 等效于 c = c ** a
# //=	取整除赋值运算符	c //= a 等效于 c = c // a
# :=	海象运算符，可在表达式内部为变量赋值。Python3.8 版本新增运算符。
#
# 在这个示例中，赋值表达式可以避免调用 len() 两次:
#
# if (n := len(a)) > 10:
#     print(f"List is too long ({n} elements, expected <= 10)")

a = 21
b = 10

c = a + b
print("1 - c 的值为：", c)

c += a
print("2 - c 的值为：", c)

c *= a
print("3 - c 的值为：", c)

c /= a
print("4 - c 的值为：", c)

c = 2
c %= a
print("5 - c 的值为：", c)

c **= a
print("6 - c 的值为：", c)

c //= a
print("7 - c 的值为：", c)

# &	按位与运算符：参与运算的两个值,如果两个相应位都为1,则该位的结果为1,否则为0	(a & b) 输出结果 12 ，二进制解释： 0000 1100
# |	按位或运算符：只要对应的二个二进位有一个为1时，结果位就为1。	(a | b) 输出结果 61 ，二进制解释： 0011 1101
# ^	按位异或运算符：当两对应的二进位相异时，结果为1 	(a ^ b) 输出结果 49 ，二进制解释： 0011 0001
# ~	按位取反运算符：对数据的每个二进制位取反,即把1变为0,把0变为1。~x 类似于 -x-1 	(~a ) 输出结果 -61 ，二进制解释： 1100 0011， 在一个有符号二进制数的补码形式。
# <<	左移动运算符：运算数的各二进位全部左移若干位，由"<<"右边的数指定移动的位数，高位丢弃，低位补0。	a << 2 输出结果 240 ，二进制解释： 1111 0000
# >>	右移动运算符：把">>"左边的运算数的各二进位全部右移若干位，">>"右边的数指定移动的位数
a = 60  # 60 = 0011 1100
b = 13  # 13 = 0000 1101

c = a & b  # 12 = 0000 1100
print("1 - c 的值为：", c)

c = a | b  # 61 = 0011 1101
print("2 - c 的值为：", c)

c = a ^ b  # 49 = 0011 0001
print("3 - c 的值为：", c)

c = ~a  # -61 = 1100 0011
print("4 - c 的值为：", c)

c = a << 2  # 240 = 1111 0000
print("5 - c 的值为：", c)

c = a >> 2  # 15 = 0000 1111
print("6 - c 的值为：", c)

# and	x and y	布尔"与" - 如果 x 为 False，x and y 返回 False，否则它返回 y 的计算值。 	(a and b) 返回 20。
# or	x or y	布尔"或" - 如果 x 是 True，它返回 x 的值，否则它返回 y 的计算值。	(a or b) 返回 10。
# not	not x	布尔"非" - 如果 x 为 True，返回 False 。如果 x 为 False，它返回 True。	not(a and b) 返回 False


a = 10
b = 20

if a and b:
    print("1 - 变量 a 和 b 都为 true")
else:
    print("1 - 变量 a 和 b 有一个不为 true")

if (a or b):
    print("2 - 变量 a 和 b 都为 true，或其中一个变量为 true")
else:
    print("2 - 变量 a 和 b 都不为 true")

# 修改变量 a 的值
a = 0
if a and b:
    print("3 - 变量 a 和 b 都为 true")
else:
    print("3 - 变量 a 和 b 有一个不为 true")

if (a or b):
    print("4 - 变量 a 和 b 都为 true，或其中一个变量为 true")
else:
    print("4 - 变量 a 和 b 都不为 true")

if not (a and b):
    print("5 - 变量 a 和 b 都为 false，或其中一个变量为 false")
else:
    print("5 - 变量 a 和 b 都为 true")

# 以下表格列出了从最高到最低优先级的所有运算符：
# ** 	指数 (最高优先级)
# ~ + - 	按位翻转, 一元加号和减号 (最后两个的方法名为 +@ 和 -@)
# * / % // 	乘，除，求余数和取整除
# + - 	加法减法
# >> << 	右移，左移运算符
# & 	位 'AND'
# ^ | 	位运算符
# <= < > >= 	比较运算符
# == != 	等于运算符
# = %= /= //= -= += *= **= 	赋值运算符
# is is not 	身份运算符
# in not in 	成员运算符
# not and or 	逻辑运算符


# abs(x)	返回数字的绝对值，如abs(-10) 返回 10
# ceil(x) 	返回数字的上入整数，如math.ceil(4.1) 返回 5
#
# cmp(x, y)
# 	如果 x < y 返回 -1, 如果 x == y 返回 0, 如果 x > y 返回 1。 Python 3 已废弃，使用 (x>y)-(x<y) 替换。
# exp(x) 	返回e的x次幂(ex),如math.exp(1) 返回2.718281828459045
# fabs(x)	返回数字的绝对值，如math.fabs(-10) 返回10.0
# floor(x) 	返回数字的下舍整数，如math.floor(4.9)返回 4
# log(x) 	如math.log(math.e)返回1.0,math.log(100,10)返回2.0
# log10(x) 	返回以10为基数的x的对数，如math.log10(100)返回 2.0
# max(x1, x2,...) 	返回给定参数的最大值，参数可以为序列。
# min(x1, x2,...) 	返回给定参数的最小值，参数可以为序列。
# modf(x) 	返回x的整数部分与小数部分，两部分的数值符号与x相同，整数部分以浮点型表示。
# pow(x, y)	x**y 运算后的值。
# round(x [,n]) 返回浮点数 x 的四舍五入值，如给出 n 值，则代表舍入到小数点后的位数。其实准确的说是保留值将保留到离上一位更近的一端。
# sqrt(x) 	返回数字x的平方根。
print(math.ceil(5.5))
print(math.modf(5.5))
# choice(seq)	从序列的元素中随机挑选一个元素，比如random.choice(range(10))，从0到9中随机挑选一个整数。
# randrange ([start,] stop [,step]) 	从指定范围内，按指定基数递增的集合中获取一个随机数，基数默认值为 1
# random() 	随机生成下一个实数，它在[0,1)范围内。
# seed([x]) 	改变随机数生成器的种子seed。如果你不了解其原理，你不必特别去设定seed，Python会帮你选择seed。
# shuffle(lst) 	将序列的所有元素随机排序
# uniform(x, y)	随机生成下一个实数，它在[x,y]范围内。
print(random.random())
print(random.uniform(5, 40))
